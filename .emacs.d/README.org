* general configuration
#+begin_src emacs-lisp
(setq-default user-full-name "Jefter Santiago Mares")
(setq-default user-mail-address "jefter.santiago66@gmail.com")

(load "~/.local/bin/emacs.el")

;; 'y' is two characters less than 'yes'.
;; 'defalias' or 'fset'?
(defalias 'yes-or-no-p 'y-or-n-p)

;; This is really annoying, yes I want to quit
(setq confirm-kill-processes nil)

(setq-default transient-mark-mode t)
(setq-default visual-line-mode t)
(setq-default truncate-lines nil)
;; (setq-default line-number-mode t)
;;(setq-default column-number-mode t)
(setq-default cursor-type 'box)

;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html.
(setq-default fill-column 78)
;; (setq-default sentence-end-double-space nil)

;; Enable maximum syntax highlighting wherever possible.
(setq-default global-font-lock-mode t)

(setq-default tab-width 4)
(use-package smartparens
  :ensure t
  :config
  (sp-use-paredit-bindings)
  (add-hook 'prog-mode-hook #'smartparens-mode)
  (sp-pair "{" nil :post-handlers '(("||\n[i]" "RET"))))

(setq make-backup-files nil)
(fset 'yes-or-no-p 'y-or-n-p)

(setq inhibit-splash-screen t
	  initial-scratch-message nil
	  initial-major-mode 'org-mode)

(setq kill-buffer-query-functions
	  (remq 'process-kill-buffer-query-function
			kill-buffer-query-functions))
;; smother scroll
(setq scroll-step            1
	  scroll-conservatively  10000
	  mouse-wheel-scroll-amount '(1 ((shift) . 1))
	  mouse-wheel-progressive-speed nil
	  mouse-wheel-follow-mouse 't)

;; insert new line whithout breaking
(defun insert-new-line-below ()
  "Add a new line below the current line"
  (interactive)
  (let ((oldpos (point)))
	(end-of-line)
	(newline-and-indent)))
(global-set-key (kbd "C-o") 'insert-new-line-below)

;; trash "custom-variables" goes to a file that is ignored
(setq custom-file "~/.emacs.d/custom.el")

#+end_src
* backup/autosaving
#+begin_src emacs-lisp
;; backup disabled
(setq-default backup-inhibited t)
(setq-default create-lockfiles nil)
(setq-default make-backup-files nil)
(use-package real-auto-save
  :ensure t
  :demand t
  :config (setq real-auto-save-interval 10)
  :hook (prog-mode . real-auto-save-mode))
#+end_src
* appearence
** theme and envoirment
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 80)
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(global-set-key (kbd "<f5>") 'revert-buffer)
(set-language-environment "UTF-8")
(global-prettify-symbols-mode t)
(setq ring-bell-function 'ignore)

;;(use-package delight)
;;(delight 'emacs-lisp-mode "Elisp" :major)


(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

(use-package dracula-theme)


(load-theme  'dracula t)
(load-theme  'almost-mono-black t)
;(set-frame-parameter (selected-frame) 'alpha '(95 . 50))
;(add-to-list 'default-frame-alist '(alpha . (95 . 50)))

(use-package rainbow-delimiters)
(global-set-key (kbd "C-x C-j") 'font-lock-mode)

;; simple mode line
(use-package mood-line)
(mood-line-mode)

;; displaying number lines

(require 'display-line-numbers)
(defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
  "Major modes on which to disable the linum mode, exempts them from global requirement"
  :group 'display-line-numbers
  :type 'list
  :version "green")
(defun display-lines-numbers--turn-on ()
  "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
  (if (and
       (not (member major-mode display-line-numbers-exempt-modes))
       (not (minibufferp)))
      (display-line-numbers-mode)))
;;(global-display-line-numbers-mode)

#+END_SRC
** fonts
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Source Code Pro 10"))
;; https://emacs.stackexchange.com/q/45895
(set-face-attribute 'fixed-pitch nil :family "Source Code Pro 10")
(use-package default-text-scale
  :demand t
  :hook (after-init . default-text-scale-mode))
#+end_src
* utf-8
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src
* evil mode 
#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src
* dir-locals
Taken from https://emacs.stackexchange.com/a/13096/10950
#+BEGIN_SRC emacs-lisp
(defun my-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (my-reload-dir-locals-for-current-buffer)))))
#+END_SRC
* multi-term
#+BEGIN_SRC emacs-lisp
(use-package multi-term)
(setq multi-term "/bin/sh")
(global-set-key (kbd "C-x t") 'multi-term)
#+END_SRC
* search and buffers behavior
** swiper
#+BEGIN_SRC  emacs-lisp
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key "\C-r" 'swiper)))
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 2.0)))))
    ))

#+END_SRC
** try
#+BEGIN_SRC  emacs-lisp
(use-package try
  :ensure t
  :config
  (progn (global-set-key (kbd "C-x b") 'ivy-switch-buffer)))
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-display-style 'fancy)

(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
* latex
#+begin_src emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)
(setq-default TeX-master nil)
(setq TeX-PDF-mode t)
(add-hook 'LateX-mode-hook (lambda () (latex-preview-pane-mode)))
(global-set-key (kbd "C-x l ") 'latex-preview-pane-mode)
#+END_SRC

#+begin_src emacs-lisp
(use-package auctex
  :hook ((latex-mode LaTeX-mode) . lsp)
  :config
  (add-to-list 'font-latex-math-environments "dmath"))
(use-package auctex-latexmk
  :after auctex
  :init
  (auctex-latexmk-setup))
#+end_src
* org-mode
#+BEGIN_SRC emacs-lisp
;; tweaks
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(setq org-ellipsis "â¤µ")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-window-setup 'current-window)
 (add-to-list 'org-structure-template-alist
            '("el" . "src emacs-lisp"))

 (add-hook 'org-mode-hook 'auto-fill-mode)
 (setq-default fill-column 79)
 (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "DROP(x!)"))
	org-log-into-drawer t)


 ;; tasks magagement
 (defun org-file-path (filename)
   " Return the absolute address of an org file, give its relative name"
   (concat (file-name-as-directory org-directory) filename))

 (setq org-index-file (org-file-path "index.org"))
 (setq org-archive-location
	(concat (org-file-path "archive.org") "::* From %s"))

 ;; copy the content out of the archive.org file and yank in the inbox.org
 (setq org-agenda-files (list org-index-file))
 ; mark  a todo as done and move it to an appropriate place in the archive.
 (defun hrs/mark-done-and-archive ()
   " Mark the state of an org-mode item as DONE and archive it."
   (interactive)
   (org-todo 'done)
   (org-archive-subtree))
 (global-set-key (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
 (setq org-log-done 'time)

 ;; capturing tasks
 (setq org-capture-templates
	'(("t" "Todo"
	   entry
	   (file+headline org-index-file "Inbox")
	   "* TODO %?\n")))
 (setq org-refile-use-outline-path t)
 (setq org-outline-path-complete-in-steps nil)
 (define-key global-map "\C-cc" 'org-capture)
 (defun hrs/open-index-file ()
   "Open the master org TODO list."
   (interactive)
   (hrs/copy-tasks-from-inbox)
   (find-file org-index-file)
   (flycheck-mode -1)
   (end-of-buffer))
 (global-set-key (kbd "C-c i") 'hrs/open-index-file)


 ;; displaying inline images
 ;; The joy of programming = https://joy.pm/post/2017-09-17-a_graphviz_primer/
 (defun my/fix-inline-images ()
   (when org-inline-image-overlays
     (org-redisplay-inline-images)))

 (add-hook 'org-babel-after-execute-hook 'my/fix-inline-images)
 (setq-default org-image-actual-width 620)
 ;; exporting with org-mode
 ;; html
 (setq org-html-postamble nil)
 (setq browse-url-browse-function 'browse-url-generic
	browse-url-generic-program "firefox")
 (setenv "BROWSER" "firefox")
 ;; diagrams
 (use-package graphviz-dot-mode
   :ensure t)
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((dot . t)))
#+END_SRC
* code
** counsel
#+BEGIN_SRC  emacs-lisp
(use-package counsel
  :ensure t
  :config
  (progn
	(global-set-key "\M-x" 'counsel-M-x)
	(global-set-key (kbd "C-x C-f") 'counsel-find-file)))
;;     (use-package auto-complete
;;     :ensure t
;;       :init
;;	  (progn
;;		(ac-config-default)
;;	(global-auto-complete-mode t)))
#+END_SRC
** flycheck
#+BEGIN_SRC  emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'flycheck-mode)
  (set-face-underline 'flycheck-error '(:color "#dc322f" :style line))
  (set-face-underline 'flycheck-warning '(:color "#e5aa00" :style line))
  (set-face-underline 'flycheck-info '(:color "#268bd2" :style line)))
#+END_SRC
** flymake
#+BEGIN_SRC  emacs-lisp
(use-package flymake
  :config
  (set-face-underline 'flymake-error '(:color "#dc322f" :style line))
  (set-face-underline 'flymake-warning '(:color "#e5aa00" :style line))
  (set-face-underline 'flymake-note '(:color "#268bd2" :style line)))
#+END_SRC
** company
#+BEGIN_SRC  emacs-lisp
(use-package company
  :ensure t
  :demand t
  :config (setq company-tooltip-align-annotations t))
#+END_SRC
** yasnippet
#+BEGIN_SRC  emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
#+END_SRC

** Shell
For this to work, =checkbashisms= needs to be available on the =$PATH=:
#+begin_src sh
sudo pacman -S checkbashisms # Arch Linux, from AUR
#+end_src
#+begin_src emacs-lisp
(use-package flycheck-checkbashisms
  ;; We assume that shellcheck can handle this.
  :disabled t
  :hook (flycheck-mode . flycheck-checkbashisms-setup)
  :config
  ;; Check 'echo -n' usage
  (setq flycheck-checkbashisms-newline t)
  (setq flycheck-checkbashisms-posix t))
#+end_src
