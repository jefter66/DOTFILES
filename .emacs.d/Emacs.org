#+TITLE: Emacs configurations
* Startup performance
  Taken from https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
  #+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))

    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
                        (time-subtract after-init-time before-init-time)))
               gcs-done))

    (add-hook 'emacs-startup-hook #'efs/display-startup-time)
  #+end_src
* General config
** Personal configs
   #+begin_src emacs-lisp
     (setq-default user-full-name "Jefter Santiago")
     (setq-default user-mail-address "jeftersantiago@protonmail.com")
     (load "~/.local/bin/private.el")
   #+end_src
   Separated file to store generated config from emacs.
   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
   #+end_src
** Backup disabled
   #+begin_src emacs-lisp
     (setq-default backup-inhibited t)
     (setq-default create-lockfiles nil)
     (setq-default make-backup-files nil)
     (use-package real-auto-save
       :ensure t
       :demand t
       :config (setq real-auto-save-interval 10)
       :hook (prog-mode . real-auto-save-mode))
   #+end_src
** Custom file
   Puts the outputs in a separated file
   - Taken from
     https://www.reddit.com/r/emacs/comments/4x655n/packageselectedpackages_always_appear_after/
     https://www.reddit.com/r/emacs/comments/53zpv9/how_do_i_get_emacs_to_stop_adding_custom_fields/
     #+begin_src 
 (setq custom-file "~/.emacs.d/custom.el")
     #+end_src
** Automatic package updates
   Automatizating the =M-x auto-package-update-now= command.
   #+begin_src emacs-lisp
     (use-package auto-package-update
       :ensure t
       :custom
       (auto-package-update-interval 7)
       (auto-package-update-prompt-before-update t)
       (auto-package-update-hide-results t)
       :config
       (auto-package-update-maybe))
   #+end_src
** No auto-save
   Do not create the ~auto-save/~ folder
   #+begin_src emacs-lisp
     (use-package no-littering :ensure t )

     ;; no-littering doesn't set this by default so we must place
     ;; auto save files in the same path as it uses for sessions
     (setq auto-save-file-name-transforms
           `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
   #+end_src
* UI Configuration
** Basics
   #+begin_src emacs-lisp
     (scroll-bar-mode 0)
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (set-fringe-mode 10)        ; Give some breathing room
     (setq inhibit-startup-message t)
   #+end_src
   Makes the parenthesis shine
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters :ensure t)
   #+end_src
   Doesn't ask to confirm everytime
   #+begin_src emacs-lisp
     (setq confirm-kill-processes nil)
     (setq-default truncate-lines t)
     (setq-default fill-column 80)
                                             ;(setq-default cursor-type 'square)
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Theme and transparency
   Loading theme and setting modeline background color.
   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       (load-theme 'doom-dracula t)
       :ensure t)
   #+end_src
   Enabling transparency
   #+begin_src emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(90 90))
     (add-to-list 'default-frame-alist '(alpha 90 90))
   #+end_src
** Font
   Took from here:  https://emacs.stackexchange.com/q/45895
   #+begin_src emacs-lisp
     (set-frame-font "Source Code Pro-12:antialias=none")
   #+end_src
   #+begin_src emacs-lisp
     (use-package default-text-scale
       :ensure t
       :hook (after-init . default-text-scale-mode))
     (set-language-environment "UTF-8")
     (global-prettify-symbols-mode t)
   #+end_src
   #+begin_src emacs-lisp
     (prefer-coding-system 'utf-8)
   #+end_src
** Modeline
   Nice and simple.
   #+begin_src emacs-lisp
                                             ; (use-package moody
                                             ;   :config
                                             ;   (setq x-underline-at-descent-line t)
                                             ;   (moody-replace-mode-line-buffer-identification)
                                             ;   (moody-replace-vc-mode)
                                             ;   :ensure t)

     (use-package all-the-icons :ensure t)

     (use-package doom-modeline
       :init (doom-modeline-mode 1)
       :custom ((doom-modeline-height 15))
       :ensure t)

   #+end_src
** Line Number
   #+begin_src emacs-lisp
     (global-display-line-numbers-mode)
     (setq display-line-numbers-type 'relative) 
   #+end_src
** Font lock
   Disables syntax hilight from startup
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-l") 'font-lock-mode)
   #+end_src
* Navigation
** Evil Mode
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/evil")
     (require 'evil)
     (evil-mode 1) 
   #+end_src
** Smart Parents
   Creates pairs of parenthesis in a smart way
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (sp-use-paredit-bindings)
       (add-hook 'prog-mode-hook #'smartparens-mode)
       (sp-pair "{" nil :post-handlers '(("||\n[i]" "RET"))))
   #+end_src
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
   #+end_src
** Scrolling
   #+begin_src emacs-lisp
     (setq kill-buffer-query-functions
           (remq 'process-kill-buffer-query-function
                 kill-buffer-query-functions))
     ;; mouse scrolls very slowly
     (setq confirm-kill-processes nil)
     (setq scroll-step            1
           scroll-conservatively  10000
           mouse-wheel-scroll-amount '(1 ((shift) . 1))
           mouse-wheel-progressive-speed nil
           mouse-wheel-follow-mouse 't)
   #+end_src
** Inserting new line
   Add a new line below the current line
   #+begin_src emacs-lisp
     (defun insert-new-line-below ()
       (interactive)
       (let ((oldpos (point)))
         (end-of-line)
         (newline-and-indent)))
     (global-set-key (kbd "C-o") 'insert-new-line-below)
   #+end_src
* Terminal
  #+begin_src emacs-lisp
    (use-package vterm
      :ensure t
      :commands vterm
      :config
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
      (setq vterm-shell "bash")                        ;; Set this to customize the shell to launch
      (setq vterm-max-scrollback 10000))
    (global-set-key (kbd "C-x t") 'vterm)
  #+end_src
* Code
** Ivy
   #+begin_src emacs-lisp 
     (use-package ivy
       :ensure t
       :config(ivy-mode 1))
   #+end_src 
** Swiper
   #+begin_src emacs-lisp
     (use-package swiper
       :ensure t
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (global-set-key "\C-s" 'swiper)))
   #+end_src
** Try
   #+begin_src emacs-lisp
     (use-package try
       :ensure t
       :config
       (progn  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)))
     (setq ivy-use-virtual-buffers t)
     (setq ivy-display-style 'fancy)
   #+end_src
** Which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+end_src
* Julia
  #+begin_src emacs-lisp
    (use-package julia-mode)
    ;; Snail requires vterm
    (use-package vterm)
    (use-package julia-snail
      :hook (julia-mode . julia-snail-mode))
    (use-package lsp-julia
      :ensure t 
      :hook (julia-mode . (lambda ()
                            (require 'lsp-julia)
                            (lsp)))
      :config
      (setq lsp-julia-default-environment "~/.julia/environments/v1.6"))
  #+end_src
* Org-mode
** UI 
   #+begin_src emacs-lisp
                                             ; this allows to use some shortcuts .. begins_src..
     (require 'org-tempo)
                                             ; enabling syntax hilight
     (add-hook 'org-mode-hook 'font-lock-mode)

     (add-to-list 'org-modules 'org-tempo t)
   #+end_src
   #+begin_src emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
     (setq org-ellipsis "ᐯ")
   #+end_src
   #+begin_src emacs-lisp
     (font-lock-add-keywords
      'org-mode
      '(("^[[:space:]]*\\(-\\) "
         (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

                                             ; (setq org-src-tab-acts-natively t)
     (setq org-src-window-setup 'current-window)
     (add-to-list 'org-structure-template-alist
                  '("el" . "src emacs-lisp"))
   #+end_src 
** Tasks management 
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook 'auto-fill-mode)
     (setq-default fill-column 79)
     (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "DROP(x!)"))
           org-log-into-drawer t)

     (defun org-file-path (filename)
       " Return the absolute address of an org file, give its relative name"
       (concat (file-name-as-directory org-directory) filename))

     (setq org-index-file (org-file-path "todo.org"))
     (setq org-archive-location
           (concat (org-file-path "done.org") "::* From %s"))

     ;; copy the content out of the archive.org file and yank in the inbox.org
     (setq org-agenda-files (list org-index-file))
                                             ; mark  a todo as done and move it to an appropriate place in the archive.
     (defun hrs/mark-done-and-archive ()
       " Mark the state of an org-mode item as DONE and archive it."
       (interactive)
       (org-todo 'done)
       (org-archive-subtree))
     (global-set-key (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
     (setq org-log-done 'time)
   #+end_src
** Capturing Tasks
   #+begin_src emacs-lisp
     (setq org-capture-templates
           '(("t" "Todo"
              entry
              (file+headline org-index-file "Inbox")
              "* TODO %?\n")))
     (setq org-refile-use-outline-path t)
     (setq org-outline-path-complete-in-steps nil)
     (define-key global-map "\C-cc" 'org-capture)
   #+end_src
** Displaying inline images
   The joy of programming = https://joy.pm/post/2017-09-17-a_graphviz_primer/nn
   #+begin_src emacs-lisp
     (defun my/fix-inline-images ()
       (when org-inline-image-overlays
         (org-redisplay-inline-images)))
     (add-hook 'org-babel-after-execute-hook 'my/fix-inline-images)
     (setq-default org-image-actual-width 620)
     (global-set-key (kbd "C-c i") 'org-toggle-inline-images)
   #+end_src 
** Exporting with org-mode
   Makes UTF-8 symbols appears in buffer I use it for editing Latex 
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook
               (lambda () (org-toggle-pretty-entities))) 
     ;; Opening pdfs
     (add-to-list 'org-file-apps '("\\.pdf" . "xreader %s"))
     (global-set-key (kbd "C-x p") 'org-latex-export-to-pdf)
   #+end_src
* Latex
  #+begin_src emacs-lisp
    (use-package auctex
      :ensure t
      :hook ((latex-mode LaTeX-mode) . tex)
      :config
      (font-lock-mode)
      (add-to-list 'font-latex-math-environments "dmath"))

    (add-hook 'LaTeX-mode-hook 'TeX-mode)
    (add-hook 'LaTeX-mode-hook 'font-lock-mode)


    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

    (setq reftex-plug-into-AUCTeX t)

    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query t)
    (setq-default TeX-master nil)
    (setq TeX-PDF-mode t)
                                            ; (add-hook 'LateX-mode-hook (lambda () (latex-preview-pane-mode)))
                                            ; (global-set-key (kbd "C-x l ") 'latex-preview-pane-mode)
    (global-set-key (kbd "C-x l ") 'pdflatex)
    (add-to-list 'org-latex-packages-alist '("" "listings" nil))
    (setq org-latex-listings t)   
    (setq org-latex-listings-options '(("breaklines" "true")))
  #+end_src
* Dired
  #+begin_src emacs-lisp
    (use-package dired-sidebar
      :ensure t
      :config
      (global-set-key (kbd "C-x C-n") 'dired-sidebar-toggle-sidebar)
      (add-hook 'dired-mode-hook 'font-lock-mode))
  #+end_src
** icons in the sidebar
   #+begin_src emacs-lisp
     (use-package all-the-icons-dired
       :ensure t
       :config (all-the-icons-dired-mode))
   #+end_src
** Definying default applications open certain types of file.
   #+begin_src emacs-lisp
     (use-package dired-open
       :ensure t
       :config
       (setq dired-open-extensions
             '(("doc" . "openoffice4")
               ("docx" . "openoffice4")
               ("xopp" . "xournalpp")
               ("gif" . "mirage")
               ("jpeg" ."mirage")
               ("jpg" . "mirage")
               ("png" . "mirage")
               ("mkv" . "mpv")
               ("avi" . "mpv")
               ("mov" . "mpv")
               ("mp3" . "mpv")
               ("mp4" . "mpv")
               ("pdf" . "xreader")
               ("webm" . "mpv"))))
   #+end_src
** Hide dotfiles and extra information (aka ownership and such)
   #+begin_src emacs-lisp
     (use-package dired-hide-dotfiles
       :ensure t
       :config
       (dired-hide-dotfiles-mode)
       (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))

     (setq-default dired-listing-switches "-lhvA")
     (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
     ;; Taken from here: https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables/13096#13096
     (defun my-reload-dir-locals-for-current-buffer ()
       "reload dir locals for the current buffer"
       (interactivye)
       (let ((enable-local-variables :all))
         (hack-dir-local-variables-non-file-buffer)))
     (defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
       "For every buffer with the same `default-directory` as the
     current buffer's, reload dir-locals."
       (interactive)
       (let ((dir default-directory))
         (dolist (buffer (buffer-list))
           (with-current-buffer buffer
             (when (equal default-directory dir))
             (my-reload-dir-locals-for-current-buffer)))))
   #+end_src

* Auto-completation
  #+begin_src emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (global-auto-complete-mode))
  #+end_src
* Buffers
  #+begin_src emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 2.0)))))))
  #+end_src 
* External
  Elcord			
#+begin_src emacs-lisp
  (use-package elcord
    :ensure t 
    :config
    (setq elcord-use-major-mode-as-main-icon t)
    :init)
   (global-set-key (kbd "C-c d") 'elcord-mode)
#+end_src

